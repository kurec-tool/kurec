// infra/jetstream/src/lib.rs
//! JetStream infrastructure helper crate
//!
//! * collects all `event_metadata::StreamDef` that were generated by `#[event]` macros
//! * collects all `event_metadata::StreamDef` that were generated by `#[event]` macros
//! * applies the definitions to a real JetStream instance at runtime using a provided `NatsClient`.

use anyhow::Result;
use async_nats::jetstream; // Keep jetstream context import
                           // Remove unused imports: Context, async_nats::self, ConnectOptions, Duration

// Import NatsClient from the new crate
// use infra_nats::NatsClient; // This will be used in js_publisher/js_subscriber

mod js_publisher;
mod js_subscriber;

pub use js_publisher::JsPublisher;
pub use js_subscriber::JsSubscriber;

// Remove JetStreamCtx struct
// Remove connect function

/// 登録されたすべてのストリーム定義を、指定された JetStream コンテキストに適用します。
///
/// *既存のストリーム*は更新されます（冪等）。アプリケーション起動時に毎回実行できます。
/// この関数は JetStream ストリームのセットアップのみを行い、KV ストアのセットアップは行いません。
pub async fn setup_all_streams(js_ctx: &jetstream::context::Context) -> Result<()> {
    // Use imports directly inside the function or at the top level if used elsewhere
    use shared_core::streams::get_all_stream_configs;
    // Remove unused imports: DiscardPolicy, StorageType

    // 登録されたすべてのストリーム設定を取得
    for config in get_all_stream_configs() {
        // JetStream 設定に変換 (StreamConfig に存在するフィールドのみ使用)
        let mut js_config = jetstream::stream::Config {
            name: config.name.clone(),
            // subjects: config.subjects.clone(), // StreamConfig に存在しない
            // storage: config.storage.into(),    // StreamConfig に存在しない -> デフォルト(Memory)を使用
            // discard: config.discard.into(),    // StreamConfig に存在しない -> デフォルト(Old)を使用
            // max_consumers, max_msgs_per_subject など、必要に応じて他の設定も追加
            ..Default::default() // その他の設定はデフォルト値を使用
        };

        // オプション設定を適用 (max_age, max_deliver, ack_wait など)
        if let Some(max_age_duration) = config.max_age {
            js_config.max_age = max_age_duration;
        }
        // StreamConfig に max_deliver, ack_wait があれば設定
        // if let Some(max_deliver) = config.max_deliver {
        //     js_config.max_deliver = max_deliver as i64; // 型変換が必要な場合
        // }
        // if let Some(ack_wait) = config.ack_wait {
        //     js_config.ack_wait = ack_wait;
        // }

        // ストリームが存在しない場合は作成、存在する場合は更新 (冪等)
        match js_ctx.get_stream(&config.name).await {
            Ok(_stream_info) => {
                // stream_info は直接使わない
                // ストリームが存在する場合、設定を更新
                // StreamConfig から取得できる情報で Config を再構築して update_stream に渡す
                // 注意: subjects, storage, discard など、StreamConfig にない情報は更新できない
                let update_config = jetstream::stream::Config {
                    name: config.name.clone(),
                    max_age: config.max_age.unwrap_or_default(), // Option<Duration> -> Duration
                    // subjects, storage, discard などはデフォルト値を使用
                    ..Default::default()
                };
                // StreamConfig に max_deliver, ack_wait があれば設定
                // if let Some(max_deliver) = config.max_deliver {
                //     update_config.max_deliver = max_deliver as i64;
                // }
                // if let Some(ack_wait) = config.ack_wait {
                //     update_config.ack_wait = ack_wait;
                // }

                js_ctx.update_stream(&update_config).await?; // & を追加
                tracing::debug!(stream_name = %config.name, "JetStream ストリームを更新しました。");
            }
            // ErrorKind::NotFound の代わりにエラーメッセージを確認 (暫定)
            Err(err) if err.to_string().contains("stream not found") => {
                // ストリームが存在しない場合、新規作成
                js_ctx.create_stream(js_config).await?;
                tracing::debug!(stream_name = %config.name, "JetStream ストリームを新規作成しました。");
            }
            Err(e) => {
                // その他のエラー
                tracing::error!(stream_name = %config.name, error = %e, "JetStream ストリームの取得/作成中にエラーが発生しました。");
                return Err(e.into());
            }
        }
        // match js_ctx.get_or_create_stream(&js_config).await {
        //     Ok(_) => {
        //         // get_or_create_stream は更新を行わないため、別途 update が必要になる場合がある
        //         // より明示的な get -> create/update の方が良いかもしれない
        //         js_ctx.update_stream(js_config).await?;
        //         tracing::debug!(stream_name = %config.name, "JetStream ストリームを作成/更新しました。");
        //     }
        //     Err(e) => {
        //          tracing::error!(stream_name = %config.name, error = %e, "JetStream ストリームの作成/更新中にエラーが発生しました。");
        //         return Err(e.into());
        //     }
        // }
    }

    Ok(())
}

// Remove setup_kurec_resources function (KV setup is handled elsewhere)

// Remove From impls due to Orphan Rule violation.
// Conversion will be handled directly in setup_all_streams.
