/*
 * mirakc Web API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0-dev.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebRecordingSchedule : A recording schedule model.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebRecordingSchedule {
    /// Reason of the recording failure.  This property exists only when the recording failed.
    #[serde(
        rename = "failedReason",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub failed_reason: Option<Option<Box<models::RecordingFailedReason>>>,
    /// Recording options.
    #[serde(rename = "options")]
    pub options: Box<models::RecordingOptions>,
    /// Metadata of the target TV program.
    #[serde(rename = "program")]
    pub program: Box<models::MirakurunProgram>,
    /// The current state of the recording schedule.
    #[serde(rename = "state")]
    pub state: models::RecordingScheduleState,
    /// A list of tags.
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
}

impl WebRecordingSchedule {
    /// A recording schedule model.
    pub fn new(
        options: models::RecordingOptions,
        program: models::MirakurunProgram,
        state: models::RecordingScheduleState,
        tags: Vec<String>,
    ) -> WebRecordingSchedule {
        WebRecordingSchedule {
            failed_reason: None,
            options: Box::new(options),
            program: Box::new(program),
            state,
            tags,
        }
    }
}
