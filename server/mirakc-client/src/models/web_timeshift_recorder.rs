/*
 * mirakc Web API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0-dev.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebTimeshiftRecorder : A timeshift recorder model.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebTimeshiftRecorder {
    /// An ID of the record currently being recorded.
    #[serde(
        rename = "currentRecordId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub current_record_id: Option<Option<i32>>,
    /// The duration of the timeshift timeline.  `0` when there is no record.
    #[serde(rename = "duration")]
    pub duration: i64,
    /// The end time of the timeshift timeline.  `null` when there is no record.
    #[serde(
        rename = "endTime",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub end_time: Option<Option<i64>>,
    /// The timeshift recorder name defined in `config.yml`.
    #[serde(rename = "name")]
    pub name: String,
    /// The number of records available for playback.  The number will change over the recording.  For example, [/timeshift/{recorder}/records](#/timeshift::records/getTimeshiftRecords) may return different number of records from this value.
    #[serde(rename = "numRecords")]
    pub num_records: i32,
    /// A list of process models constituting the timeshift pipeline currently running.
    #[serde(rename = "pipeline")]
    pub pipeline: Vec<models::WebProcessModel>,
    /// `true` while recording, `false` otherwise.  Users can still access the records even if this property returns `false`.
    #[serde(rename = "recording")]
    pub recording: bool,
    /// Metadata of the service to be recorded.
    #[serde(rename = "service")]
    pub service: Box<models::MirakurunService>,
    /// The start time of the timeshift timeline.  `null` when there is no record.
    #[serde(
        rename = "startTime",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_time: Option<Option<i64>>,
}

impl WebTimeshiftRecorder {
    /// A timeshift recorder model.
    pub fn new(
        duration: i64,
        name: String,
        num_records: i32,
        pipeline: Vec<models::WebProcessModel>,
        recording: bool,
        service: models::MirakurunService,
    ) -> WebTimeshiftRecorder {
        WebTimeshiftRecorder {
            current_record_id: None,
            duration,
            end_time: None,
            name,
            num_records,
            pipeline,
            recording,
            service: Box::new(service),
            start_time: None,
        }
    }
}
