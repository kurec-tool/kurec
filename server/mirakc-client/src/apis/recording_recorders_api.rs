/*
 * mirakc Web API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0-dev.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_recorder`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRecorderError {
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_recorders`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRecordersError {
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`start_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StartRecordingError {
    Status401(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopRecordingError {
    Status401(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}


pub async fn get_recorder(configuration: &configuration::Configuration, program_id: i64) -> Result<models::WebRecordingRecorder, Error<GetRecorderError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_program_id = program_id;

    let uri_str = format!("{}/recording/recorders/{program_id}", configuration.base_path, program_id=p_program_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WebRecordingRecorder`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WebRecordingRecorder`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRecorderError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_recorders(configuration: &configuration::Configuration, ) -> Result<Vec<models::WebRecordingRecorder>, Error<GetRecordersError>> {

    let uri_str = format!("{}/recording/recorders", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::WebRecordingRecorder&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::WebRecordingRecorder&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRecordersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING] > Use `POST /api/recording/schedules` instead. > The recording starts even if the TV program has not started. > In this case, the recording will always fail.  ### If `config.recording.records-dir` is specified  A record will be created in the specified folder and a `recording.record-saved` event will be sent if the record is created successfully.  Otherwise, a `recording.record-broken` event will be sent instead.
pub async fn start_recording(configuration: &configuration::Configuration, web_recording_schedule_input: models::WebRecordingScheduleInput) -> Result<(), Error<StartRecordingError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_web_recording_schedule_input = web_recording_schedule_input;

    let uri_str = format!("{}/recording/recorders", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_web_recording_schedule_input);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<StartRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Unlike `DELETE /api/recording/schedules/{program_id}`, this endpoint only stops the recording without removing the corresponding recording schedule.  A `recording.stopped` event will be sent and `GET /api/recording/schedules/{program_id}` will return the schedule information.  ### If `config.recording.records-dir` is specified  A `recording.record-saved` event will be sent if the record is updated successfully. Otherwise, a `recording.record-broken` event will be sent instead.
pub async fn stop_recording(configuration: &configuration::Configuration, program_id: i64) -> Result<(), Error<StopRecordingError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_program_id = program_id;

    let uri_str = format!("{}/recording/recorders/{program_id}", configuration.base_path, program_id=p_program_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<StopRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

